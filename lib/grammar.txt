program     → declaration* EOF ;

declaration → varDecl
            | statement ;

statement   → exprStmt
            | ifStmt
            | printStmt 
            | whileStmt
            | forStmt
            | block ;

forStmt   → "for" "(" ( varDecl | exprStmt | ";" )
                      expression? ";"
                      expression? ")" statement ;

block → "{" declaration* "}" ;

ifStmt    → "if" "(" expression ")" statement ( "else" statement )? ;

varDecl → "var" IDENTIFIER ( "=" expression )? ";" ;

exprStmt  → expression ";" ;
printStmt → "print" expression ";" ;

whileStmt → "while" "(" expression ")" statement ;

expression → assignment ;
assignment → identifier "=" assignment
           | equality
           | logic ;

logic   → equality ( ( "or" | "and" ) logic )* ;

equality       → comparison ( ( "!=" | "==" ) comparison )* ;
comparison     → addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;
addition       → multiplication ( ( "-" | "+" ) multiplication )* ;
multiplication → unary ( ( "/" | "*" ) unary )* ;
unary          → ( "!" | "-" ) unary
               | primary ;
primary        → NUMBER | STRING | "false" | "true" | "nil" | IDENTIFIER
               | "(" expression ")" ;
               
               
expression → literal
           | unary
           | binary
           | grouping ;

literal    → NUMBER | STRING | "false" | "true" | "nil" | IDENTIFIER;
grouping   → "(" expression ")" ;
unary      → ( "-" | "!" ) expression ;
binary     → expression operator expression ;
operator   → "==" | "!=" | "<" | "<=" | ">" | ">="
           | "+"  | "-"  | "*" | "/" ;
